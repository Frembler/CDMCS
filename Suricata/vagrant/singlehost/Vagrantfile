$provision_script = <<SCRIPT
start=$(date)

cat >> /etc/sysctl.conf <<EOF
net.ipv6.conf.all.disable_ipv6 = 1
net.ipv6.conf.default.disable_ipv6 = 1
net.ipv6.conf.lo.disable_ipv6 = 1
EOF
sysctl -p

echo 'Acquire::ForceIPv4 "true";' | sudo tee /etc/apt/apt.conf.d/99force-ipv4
export DEBIAN_FRONTEND=noninteractive

#set versions here
SCIRIUS="scirius_1.2.0-1_amd64.deb"
EVEBOX="evebox_0.6.0dev~dev20170223182129_amd64.deb"
ELASTICSEARCH="elasticsearch-5.2.1.deb"
TELEGRAF="telegraf_1.2.1_amd64.deb"
INFLUXDB="influxdb_1.2.0_amd64.deb"
GRAFANA="grafana_4.1.2-1486989747_amd64.deb"

cd /vagrant

echo "$(date) updating apt repo"
add-apt-repository ppa:oisf/suricata-stable > /dev/null 2>&1
apt-get update > /dev/null 2>&1
echo "$(date) installing telegraf"
[[ -f $TELEGRAF ]] || wget  -q -4 https://dl.influxdata.com/telegraf/releases/$TELEGRAF
dpkg -i $TELEGRAF > /dev/null 2>&1
systemctl stop telegraf
cat >> /etc/telegraf/telegraf.conf <<EOF
[[inputs.net]]
[[inputs.netstat]]
EOF
systemctl enable telegraf  > /dev/null 2>&1
usermod -a -G adm telegraf
systemctl start telegraf


echo "$(date) installing influxdb"
[[ -f $INFLUXDB ]] || wget  -q -4 https://dl.influxdata.com/influxdb/releases/$INFLUXDB
dpkg -i $INFLUXDB > /dev/null 2>&1
systemctl enable influxdb  > /dev/null 2>&1
systemctl start influxdb


echo "$(date) installing openjdk-8-jre-headless"
apt-get -y install openjdk-8-jre-headless > /dev/null 2>&1
echo "$(date) installing Elasticsearch"
[[ -f $ELASTICSEARCH ]] || wget  -q -4 https://artifacts.elastic.co/downloads/elasticsearch/$ELASTICSEARCH
dpkg -i $ELASTICSEARCH > /dev/null 2>&1
systemctl enable elasticsearch > /dev/null 2>&1
systemctl start elasticsearch


#suricata
echo "$(date) installing Suricata"
#add-apt-repository ppa:oisf/suricata-stable > /dev/null 2>&1
#apt-get update > /dev/null 2>&1
apt-get -y install suricata > /dev/null 2>&1
systemctl stop suricata

#ls /sys/class/net | grep -v lo
# see http://pevma.blogspot.com.ee/2015/05/suricata-multiple-interface.html
cat >> /etc/suricata/suricata.yaml <<EOF
af-packet:
  - interface: enp0s3
    cluster-id: 98
    cluster-type: cluster_flow
    defrag: yes
  - interface: enp0s8
    cluster-id: 97
    cluster-type: cluster_flow
    defrag: yes
EOF
touch  /etc/suricata//threshold.config
#suricata -T -vvv
[[ $(suricata -T) ]] || exit -1
systemctl enable suricata > /dev/null 2>&1
systemctl start suricata
chown root:adm /var/run/*.pid
cat >> /etc/telegraf/telegraf.conf <<EOF
[[inputs.procstat]]
    pid_file = "/var/run/suricata.pid"
EOF
systemctl restart telegraf

# evebox
echo "$(date) installing GeoLite2"
[[ -f 'GeoLite2-City.mmdb.gz' ]] || wget -q  -4 http://geolite.maxmind.com/download/geoip/database/GeoLite2-City.mmdb.gz
mkdir -p /usr/local/share/GeoIP
gunzip GeoLite2-City.mmdb.gz --stdout > /usr/local/share/GeoIP/GeoLite2-City.mmdb
echo "$(date) installing evebox"
[[ -f $EVEBOX ]] ||wget  -q -4 https://bintray.com/jasonish/evebox-development-debian/download_file?file_path=$EVEBOX -O $EVEBOX
dpkg -i $EVEBOX > /dev/null 2>&1

echo 'ELASTICSEARCH_INDEX="suricata"' >> /etc/default/evebox
cp /etc/default/evebox /etc/default/evebox-esimport

#create template
#export ELASTICSEARCH_INDEX="evebox"
#evebox esimport --verbose --oneshot --elasticsearch http://localhost:9200 /var/log/suricata/eve.json

cat > /lib/systemd/system/evebox-esimport.service <<EOF
[Unit]
Description=EveBox-EsImport

[Service]
ExecStart=/usr/bin/evebox esimport \\$ELASTICSEARCH_URL \\$CONFIG \\$EVEBOX_OPTS --end /var/log/suricata/eve.json
EnvironmentFile=-/etc/default/evebox-esimport

[Install]
WantedBy=multi-user.target
EOF

systemctl enable evebox-esimport > /dev/null 2>&1
systemctl start evebox-esimport

systemctl enable evebox > /dev/null 2>&1
systemctl start evebox

# create some noise ...
echo "$(date) generation some alert traffic"
apt-get -y install nmap > /dev/null &
grep -h -E -o "([0-9]{1,3}[\.]){3}[0-9]{1,3}" /etc/suricata/rules/*.rules | sort | uniq | grep -v "\.0$" |rev| sort| rev | head -1000 | tail| while read ip;
do
nmap -p 22,80,443 --script=banner $ip > /dev/null &
sleep 1
done

# grafana
echo "$(date) installing grafana"
apt-get -y install libfontconfig > /dev/null 2>&1
[[ -f $GRAFANA ]] || wget -q -4 https://grafanarel.s3.amazonaws.com/builds/$GRAFANA
dpkg -i $GRAFANA > /dev/null 2>&1
systemctl enable grafana-server > /dev/null 2>&1
systemctl start grafana-server
sleep 1
curl -s -XPOST --user admin:admin 192.168.10.11:3000/api/datasources -H "Content-Type: application/json" -d '{
    "name": "telegraf",
    "type": "influxdb",
    "access": "proxy",
    "url": "http://localhost:8086",
    "database": "telegraf",
    "isDefault": true
}'



#Scirius
echo "$(date) installing Scirius"
apt-get -y install nginx supervisor gunicorn sqlite3 python-lockfile python-docutils docutils-common python-daemon python-pyinotify dbconfig-common python-influxdb > /dev/null 2>&1

#[[ -f $SCIRIUS ]] ||wget  -q -4 http://dl.stamus-networks.com/scirius/trainings/$SCIRIUS
[[ -f $SCIRIUS ]] ||wget  -q -4 http://packages.stamus-networks.com/generic/pool/main/s/scirius/$SCIRIUS
dpkg -i $SCIRIUS > /dev/null 2>&1

cat > /etc/supervisor/conf.d/scirius-supervisor.conf <<EOF
[program:scirius]
command=/usr/bin/gunicorn -w 5 scirius.wsgi --log-file /tmp/scirius_error_logs.log -t 600
directory=/usr/share/python/scirius/lib/python2.7/site-packages
environment=HOME="/var/www"
environment=PATH="/usr/share/python/scirius/bin:/usr/bin"
user=www-data
stdout_logfile=/var/log/scirius.log
stderr_logfile=/var/log/scirius-error.log
autostart=true
autorestart=true
EOF

cat > /etc/nginx/sites-available/stamus.conf <<EOF
server {
   listen 192.168.10.11:80;
   access_log /var/log/nginx/scirius.access.log;
   error_log /var/log/nginx/scirius.error.log;
   # https://docs.djangoproject.com/en/dev/howto/static-files/#serving-static-files-in-production
   location /static/ { # STATIC_URL
       alias /var/lib/scirius/static/; # STATIC_ROOT
       expires 30d;
   }
   location /media/ { # MEDIA_URL
       alias /var/lib/scirius/static/; # MEDIA_ROOT
       expires 30d;
   }
   location / {
       proxy_pass http://127.0.0.1:8000;
       proxy_read_timeout 600;
       proxy_set_header Host \\$http_host;
       #proxy_set_header X-Forwarded-Proto https;
       proxy_redirect off;
   }
}
EOF
cat > /etc/nginx/sites-available/default.conf <<EOF
server {
  listen 127.0.0.1:80;
  location /status {
               stub_status on;
               access_log off;
               allow 127.0.0.1;
               allow 192.168.10.11;
               deny all;
       }
}
EOF
ln -s /etc/nginx/sites-available/stamus.conf /etc/nginx/sites-enabled/stamus.conf
systemctl enable nginx > /dev/null 2>&1
systemctl restart nginx
cat >> /etc/telegraf/telegraf.conf <<EOF
[[inputs.nginx]]
  urls = ["http://localhost/status"]
[[inputs.procstat]]
    pid_file = "/var/run/nginx.pid"
EOF
systemctl restart telegraf

#chown www-data /var/log/scirius*
#chown www-data /tmp/scirius_error_logs.log
# fix /etc/scirius/local_settings.py set evebox stuffff
#sed -i -e 's,logstash,evebox,g' /etc/scirius/local_settings.py
echo 'ELASTICSEARCH_LOGSTASH_INDEX = "suricata-"' >> /etc/scirius/local_settings.py
echo 'USE_INFLUXDB = True' >> /etc/scirius/local_settings.py

# adding sources to rulesets
source /usr/share/python/scirius/bin/activate
python /usr/share/python/scirius/bin/manage.py addsource "ETOpen Ruleset" https://rules.emergingthreats.net/open/suricata-3.0/emerging.rules.tar.gz http sigs
python /usr/share/python/scirius/bin/manage.py addsource "PT Research Ruleset" https://github.com/ptresearch/AttackDetection/raw/master/pt.rules.tar.gz http sigs
python /usr/share/python/scirius/bin/manage.py defaultruleset "CDMCS ruleset"
python /usr/share/python/scirius/bin/manage.py addsuricata suricata "Suricata on CDMCS" /etc/suricata/rules "CDMCS ruleset"
python /usr/share/python/scirius/bin/manage.py updatesuricata
deactivate

systemctl enable supervisor.service > /dev/null 2>&1
systemctl start supervisor.service
supervisorctl reread
supervisorctl update
supervisorctl restart scirius


echo "DONE :: start $start end $(date)"
netstat -ntple
SCRIPT


Vagrant.configure(2) do |config|
  config.vm.define 'Amstelredamme' do |box|
      box.vm.box = "ubuntu/xenial64"
      box.vm.hostname = 'Amstelredamme'
      box.vm.network :private_network, ip: "192.168.10.11"
      box.vm.provider :virtualbox do |vb|
       vb.customize ["modifyvm", :id, "--memory", "4096"]
       vb.customize ["modifyvm", :id, "--cpus", "4"]
      end
      config.vm.provision "shell", inline: $provision_script
  end
end
